import tkinter as tk
from tkinter import messagebox, simpledialog, Listbox, Scrollbar
import json
import os

class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Expense Tracker")
        
        self.transactions = []
        self.load_transactions()

        # Title
        self.label_title = tk.Label(root, text="Personal Expense Tracker", font=("Helvetica", 16))
        self.label_title.pack(pady=10)

        # Input Frame
        self.input_frame = tk.Frame(root)
        self.input_frame.pack(pady=10)

        self.label_description = tk.Label(self.input_frame, text="Description:")
        self.label_description.grid(row=0, column=0)
        self.entry_description = tk.Entry(self.input_frame)
        self.entry_description.grid(row=0, column=1)

        self.label_amount = tk.Label(self.input_frame, text="Amount:")
        self.label_amount.grid(row=1, column=0)
        self.entry_amount = tk.Entry(self.input_frame)
        self.entry_amount.grid(row=1, column=1)

        self.label_type = tk.Label(self.input_frame, text="Type (income/expense):")
        self.label_type.grid(row=2, column=0)
        self.entry_type = tk.Entry(self.input_frame)
        self.entry_type.grid(row=2, column=1)

        # Buttons
        self.button_add = tk.Button(root, text="Add Transaction", command=self.add_transaction)
        self.button_add.pack(pady=5)

        self.button_view = tk.Button(root, text="View Transactions", command=self.view_transactions)
        self.button_view.pack(pady=5)

        self.button_clear = tk.Button(root, text="Clear Transactions", command=self.clear_transactions)
        self.button_clear.pack(pady=5)

        # Listbox to display transactions
        self.transaction_listbox = Listbox(root, width=50, height=10)
        self.transaction_listbox.pack(pady=10)

        # Scrollbar
        self.scrollbar = Scrollbar(root)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.transaction_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.transaction_listbox.yview)

        self.button_delete = tk.Button(root, text="Delete Selected", command=self.delete_transaction)
        self.button_delete.pack(pady=5)

        self.button_edit = tk.Button(root, text="Edit Selected", command=self.edit_transaction)
        self.button_edit.pack(pady=5)

    def load_transactions(self):
        if os.path.exists('transactions.json'):
            with open('transactions.json', 'r') as file:
                self.transactions = json.load(file)

    def save_transactions(self):
        with open('transactions.json', 'w') as file:
            json.dump(self.transactions, file)

    def add_transaction(self):
        description = self.entry_description.get()
        amount = self.entry_amount.get()
        transaction_type = self.entry_type.get()

        if description and amount and transaction_type in ['income', 'expense']:
            try:
                amount = float(amount)
                self.transactions.append((description, amount, transaction_type))
                self.save_transactions()
                messagebox.showinfo("Success", "Transaction added!")
                self.clear_inputs()
            except ValueError:
                messagebox.showerror("Error", "Please enter a valid amount.")
        else:
            messagebox.showwarning("Warning", "Please fill in all fields correctly.")

    def clear_inputs(self):
        self.entry_description.delete(0, tk.END)
        self.entry_amount.delete(0, tk.END)
        self.entry_type.delete(0, tk.END)

    def view_transactions(self):
        self.transaction_listbox.delete(0, tk.END)
        if not self.transactions:
            messagebox.showinfo("Transactions", "No transactions to display.")
            return

        for desc, amt, t_type in self.transactions:
            self.transaction_listbox.insert(tk.END, f"{desc}: ${amt:.2f} ({t_type})")

    def delete_transaction(self):
        try:
            selected_index = self.transaction_listbox.curselection()[0]
            del self.transactions[selected_index]
            self.save_transactions()
            self.view_transactions()
            messagebox.showinfo("Deleted", "Transaction deleted successfully!")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a transaction to delete.")

    def edit_transaction(self):
        try:
            selected_index = self.transaction_listbox.curselection()[0]
            desc, amt, t_type = self.transactions[selected_index]
            new_desc = simpledialog.askstring("Edit Transaction", "New description:", initialvalue=desc)
            new_amt = simpledialog.askstring("Edit Transaction", "New amount:", initialvalue=amt)
            new_type = simpledialog.askstring("Edit Transaction", "New type (income/expense):", initialvalue=t_type)

            if new_desc and new_amt and new_type in ['income', 'expense']:
                try:
                    new_amt = float(new_amt)
                    self.transactions[selected_index] = (new_desc, new_amt, new_type)
                    self.save_transactions()
                    self.view_transactions()
                    messagebox.showinfo("Success", "Transaction updated!")
                except ValueError:
                    messagebox.showerror("Error", "Please enter a valid amount.")
            else:
                messagebox.showwarning("Warning", "Please fill in all fields correctly.")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a transaction to edit.")

    def clear_transactions(self):
        self.transactions = []
        self.save_transactions()
        messagebox.showinfo("Clear", "All transactions cleared!")
        self.view_transactions()

if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
